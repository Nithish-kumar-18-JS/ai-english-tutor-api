datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                Int                      @id @default(autoincrement())
  firebaseUid       String                   @unique
  email             String                   @unique
  name              String?
  picture           String?
  createdAt         DateTime                 @default(now())
  updatedAt         DateTime                 @updatedAt
  questions         OnBoardingQuestions[]
  savedWords        UserWords[]
  todaySessionWords TodaySessionVocabWords[]
  trackWeeklyGoals  TrackWeeklyWordsGoals[]
  userWordStreaks   UserWordStreaks[]
  userAchievements  UserAchievements[]
}

model OnBoardingQuestions {
  id                    Int      @id @default(autoincrement())
  user                  User     @relation(fields: [userId], references: [id])
  userId                Int
  englishProficiencyGoal String
  whyLearningEnglish    String
  englishLevel          String
  timeSpentEnglish      String
  streakAlerts          Boolean
  quickChallenge        String
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model TodaySessionVocabWords {
  id        Int             @id @default(autoincrement())
  user      User            @relation(fields: [userId], references: [id])
  userId    Int
  word     VocabularyWords @relation(fields: [wordId], references: [id])
  wordId    Int    
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model TrackWeeklyWordsGoals {
  id             Int      @id @default(autoincrement())
  user           User     @relation(fields: [userId], references: [id])
  userId         Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  dailyGoal      Int
  weeklyGoal     Int
  dailyProgress  Int
  weeklyProgress Int
  totalGoal      Int
  totalProgress  Int
}

enum WordStreakType {
  DAILY
  WEEKLY
  TOTAL
  ACHIEVEMENT
}

model UserWordStreaks {
  id           Int         @id @default(autoincrement())
  user         User        @relation(fields: [userId], references: [id])
  userId       Int
  wordStreak   WordStreaks @relation(fields: [wordStreakId], references: [id])
  wordStreakId Int
  currentStreak Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([userId, wordStreakId])
}

model WordStreaks {
  id        Int             @id @default(autoincrement())
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  name      String          @unique
  type      WordStreakType
  goal      Int
  UserWordStreaks UserWordStreaks[]
}

enum AchievementType {
  PROGRESS
  CONSISTENCY
  SPECIAL
}

model Achievement {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  type      AchievementType
  condition Json     // e.g. { "words": 500 } or { "days": 30 }
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userAchievements UserAchievements[]
}

model UserAchievements {
  id             Int          @id @default(autoincrement())
  user           User         @relation(fields: [userId], references: [id])
  userId         Int
  achievement    Achievement  @relation(fields: [achievementId], references: [id])
  achievementId  Int
  unlockedAt     DateTime     @default(now())

  @@unique([userId, achievementId])
}

model VocabularyWords {
  id              Int      @id @default(autoincrement())
  level           String
  word            String
  partOfSpeech    String
  exampleSentence String
  phoneticsText   String
  phoneticsAudio  String
  definitions     String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  UserWords       UserWords[]
  TodaySessionVocabWords TodaySessionVocabWords[]
}

enum UserWordStatus {
  LEARNED
  SAVED
}

model UserWords {
  id        Int             @id @default(autoincrement())
  user      User            @relation(fields: [userId], references: [id])
  userId    Int
  word     VocabularyWords @relation(fields: [wordId], references: [id])
  wordId    Int
  status    UserWordStatus
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}
